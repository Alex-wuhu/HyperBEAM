-module(hb_path).
-export([push/3, push_hashpath/2, push_request/2]).
-export([queue_request/2, pop_request/1]).
-export([verify_hashpath/2]).

%%% @moduledoc This module provides utilities for manipulating the paths of a
%%% message: Its request path (referred to in messages as just the `Path`), and
%%% its HashPath.
%%% 
%%% A HashPath is a rolling Merkle list of the messages that have been applied 
%%% in order to generate a given message. Because applied messages can
%%% themselves be the result of message applications with the Permaweb Abstract
%%% Machine (PAM), the HashPath can be thought of as the tree of messages that
%%% represent the history of a given message. The initial message on a HashPath
%%% is referred to by its ID and serves as its user-generated 'root'.
%%% 
%%% Specifically, the HashPath can be generated by hashing the previous HashPath
%%% and the current message. This means that each message in the HashPath is
%%% dependent on all previous messages.
%%% 
%%%     Msg1.HashPath = Msg1.ID
%%%     Msg3.HashPath = Msg1.Hash(Msg1.HashPath, Msg2.ID)
%%%     Msg3.{...} = PAM.apply(Msg1, Msg2)
%%%     ...
%%% 
%%% A message's ID itself includes its HashPath, leading to the mixing of
%%% a Msg2's merkle list into the resulting Msg3's HashPath. This allows a single
%%% message to represent a history _tree_ of all of the messages that were
%%% applied to generate it -- rather than just a linear history.
%%% 
%%% A message may also specify its own algorithm for generating its HashPath,
%%% which allows for custom logic to be used for representing the history of a
%%% message. When Msg2's are applied to a Msg1, the resulting Msg3's HashPath
%%% will be generated according to Msg1's algorithm choice.

%% @doc Add a path element to a message, according to the type given.
push(hashpath, Msg3, Msg2) ->
	push_hashpath(Msg3, Msg2);
push(request, Msg3, Msg2) ->
	push_request(Msg3, Msg2).

%%% @doc Add a message to a HashPath.
push_hashpath(Msg, HashPath) ->
	Msg.

%%% @doc Add a message to a request path.
push_request(Msg, Path) ->
	Msg.

%%% @doc Pop a message from a request path.
pop_request(Msg) when is_map(Msg) ->

	Path.

